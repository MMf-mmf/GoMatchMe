"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
from environs import Env
from datetime import timedelta
import sentry_sdk

env = Env()
env.read_env()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!


# Application definition


DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    # 'daphne', # pip install just needs to be on top if a nother app like whitenoise.runserver_nostatic is installed and taking over the runserver command (still not sure how this is actually working)
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
]

THIRD_PARTY_APPS = [
    "channels",
    "corsheaders",
    "rest_framework",
    "rest_framework.authtoken",
    "rest_framework_simplejwt",
    "django_htmx",
    "allauth",  # for user authentication
    "allauth.account",  # for user authentication
    "allauth.socialaccount",
    "widget_tweaks",  # for form customization
    "mathfilters",  # for math operations in templates
    "django_countries",  # for country fields
    # 'simple_history',                 # not needed as of now
    "phonenumber_field",
    # "ckeditor",
    "django_prose_editor",
    "anymail",  # for sending emails
    "django_select2",
    "storages",  # for storing files on AWS
    # WAGTAIL APPS
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.embeds",
    "wagtail.sites",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "wagtail.images",
    "wagtail.search",
    "wagtail.admin",
    "wagtail",
    "modelcluster",
    "taggit",
    "django_recaptcha",
    "django_hosts",  # for subdomains
]

LOCAL_APPS = [
    "accounts_app",
    "match_app",
    "payments_app",
    "chats_app",
    "temperament_analysis_app",
    "blog",
]


TAILWIND_CSS_PATH = "css/dist/styles.css"


ROOT_HOSTCONF = "project.hosts"
DEFAULT_HOST = "main_site_urls"
ROOT_URLCONF = "project.urls"
AUTH_USER_MODEL = "accounts_app.CustomUser"
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"


AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",  # new
)

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

# TIME_ZONE = 'UTC'
TIME_ZONE = "America/New_York"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]
# # Base url to serve media files
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media/")

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
    os.path.join(BASE_DIR, "node_modules"),
]

STORAGES = {
    "default": {
        "BACKEND": "project.storage_backends.PrivateMediaStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.ManifestStaticFilesStorage",
    },
}

# if USE_S3:
#     # aws settings
#     AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
#     AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
#     AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')
#     AWS_DEFAULT_ACL = None
#     AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
#     AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
#     # s3 static settings
#     STATIC_LOCATION = 'static'
#     STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATIC_LOCATION}/'
#     STATICFILES_STORAGE = 'project.storage_backends.StaticStorage'
#     # s3 public media settings
#     PUBLIC_MEDIA_LOCATION = 'media'
#     MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{PUBLIC_MEDIA_LOCATION}/'
#     DEFAULT_FILE_STORAGE = 'project.storage_backends.PublicMediaStorage'
#     # s3 private media settings
#     PRIVATE_MEDIA_LOCATION = 'private'
#     PRIVATE_FILE_STORAGE = 'project.storage_backends.PrivateMediaStorage'
# else:
#     STATIC_URL = '/staticfiles/'
#     STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
#     MEDIA_URL = '/media/'
#     MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

WAGTAIL_SITE_NAME = "ShidduchMe"
WAGTAILADMIN_BASE_URL = "https://ShidduchMe.com"
WAGTAILDOCS_EXTENSIONS = ["csv", "docx", "pdf", "key", "odt", "pptx", "rtf", "txt", "xlsx", "zip", "jpeg", "png"]

# CKEDITOR_CONFIGS = {
#     "default": {
#         "toolbar": "Custom",
#         "toolbar_Custom": [
#             ["Bold", "Italic", "Underline"],
#             ["NumberedList", "BulletedList"],
#             ["Unlink"],
#         ],
#     }
# }
DEFAULT_FROM_EMAIL = "no-reply@shidduchme.com"

STRIPE_API_VERSION = "2022-11-15"

# django-allauth settings
LOGIN_REDIRECT_URL = "home"
ACCOUNT_LOGOUT_REDIRECT = "home"
ACCOUNT_SIGNUP_REDIRECT_URL = "home"  # '/accounts/email/'
# this will remove the remember me checkbox on the login page, and just remember the user
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = False
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_LOGIN_BY_CODE_ENABLED = True
ACCOUNT_EMAIL_NOTIFICATIONS = True
ACCOUNT_CHANGE_EMAIL = True

ACCOUNT_FORMS = {
    "login": "accounts_app.forms.CustomLoginForm",
}
"""EMAIL CONFIGURATION"""

EMAIL_BACKEND = "anymail.backends.mailgun.EmailBackend"

CELERY_IMPORTS = ("utils.email_sender",)

# TEXT SETTINGS
# TWILIO_ACCOUNT_SID = env('TWILIO_ACCOUNT_SID')
# TWILIO_AUTH_TOKEN = env('TWILIO_AUTH_TOKEN')
# TWILIO_PHONE_NUMBER = env('TWILIO_DEFAULT_CALLERID')
DEV_PHONE_NUMBER = env("DEV_PHONE_NUMBER")
GOOGLE_MAPS_API_KEY = env("GOOGLE_MAPS_API_KEY")
# ENTRYPOINT FOR THE ASGI SERVER
# ASGI_APPLICATION = "project.asgi.application"


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}


# JWT settings for passing tokens for chat requests
JWT_AUTH = {
    "JWT_SECRET_KEY": env("DJANGO_SECRET_KEY"),  # Use the same secret key as Django
    "JWT_ALGORITHM": "HS256",
    "JWT_ALLOW_REFRESH": True,
    "JWT_EXPIRATION_DELTA": timedelta(days=2),
    "JWT_REFRESH_EXPIRATION_DELTA": timedelta(days=2),
}
# rate limit the amount of email verification emails that can be sent at a time
# ACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 1600
ACCOUNT_RATE_LIMITS = {
    "signup": "2/m",  # 5 signups per minute
    "login": "7/m",  # 10 logins per minute
    "password_reset": "2/m",  # 5 password reset requests per minute
    "email_confirmation": "1/m",  # 5 email confirmations per minute
}
TIER_1_SUGGESTION_DURATION = 3
TIER_2_SUGGESTION_DURATION = 5
TIER_3_SUGGESTION_DURATION = 7
TIER_1_AMOUNT = 0
TIER_2_AMOUNT = 5
TIER_3_AMOUNT = 14
PLEDGE_ASSURANCE_CHARGE = 5  # once every 6 months

ADMINS = [
    # Add your admin information here
    # ("Your Name", "your.email@example.com"),
]

# LOGGING
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
    },
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "email": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
            "include_html": True,
            "filters": ["require_debug_false"],
        },
        # 'file': {
        #     'level': 'DEBUG',
        #     'class': 'logging.FileHandler',
        #     'filename': '/path/to/log/file.log',
        #     'formatter': 'verbose',
        # },
    },
    "loggers": {
        # 'django': {
        #     'handlers': ['console', 'email'],
        #     'level': 'INFO',
        # },
        "project": {
            "handlers": ["console", "email"],
            "level": "DEBUG",
        },
    },
}


# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": "redis://cache:6379/1",  # Use the service name 'cache'
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#         }
#     },
#     'select2': {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": "redis://cache:6379/2",  # Use the service name 'cache'
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#         },
#         "TIMEOUT": 600,  # Set timeout to 10 minutes
#     }
# }

# local setup
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
    "select2": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",  # Use a different Redis database for select2 cache
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
        "TIMEOUT": 600,  # Set timeout to 10 minutes
    },
    "celery": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
}

# Set the cache backend to select2
SELECT2_CACHE_BACKEND = "select2"
CELERY_BROKER_URL = "redis://localhost:6379/0"
CELERY_RESULT_BACKEND = "redis://localhost:6379/0"


# recaptcha settings
RECAPTCHA_PUBLIC_KEY = os.environ.get("RECAPTCHA_PUBLIC_KEY")
RECAPTCHA_PRIVATE_KEY = os.environ.get("RECAPTCHA_PRIVATE_KEY")
RECAPTCHA_REQUIRED_SCORE = 0.85


TWILIO_ACCOUNT_SID = env("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = env("TWILIO_AUTH_TOKEN")
TWILIO_PHONE_NUMBER = env("TWILIO_PHONE_NUMBER")
YOUR_PHONE_NUMBER = env("DEV_PHONE_NUMBER")


CORS_ALLOWED_ORIGINS = [
    "https://shidduchme.com",
    "https://www.shidduchme.com",
    "https://staging.shidduchme.com",
    "https://www.staging.shidduchme.com",
    "https://mendel.shidduchme.com",
    "https://www.mendel.shidduchme.com",
    "http://localhost:8000",
    "http://localhost:3000",
]
